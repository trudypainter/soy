import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useState, useEffect } from "react";
import { Link, animateScroll as scroll, Events, scrollSpy } from "react-scroll";
import Menu from "../components/Menu";
import Section from "../components/Section";
import { createClient } from "next-sanity";

const client = createClient({
  projectId: "tqbcbz9e",
  dataset: "production",
  apiVersion: "2022-03-25",
  useCdn: true,
});

export async function getStaticProps() {
  const ogPosts = await client.fetch(`*[_type == "post"]{
    "title": title,
    "titleKorean": titleKorean,
    "menuTag": menuTag,
    "menuTagKorean": menuTagKorean,
    "menuType": menuType->{value, valueKorean},
    "categories": categories[]->{value, valueKorean},
    "body": body[]{
      ...,
      "asset": asset->url,
      "video": video->url,
      "imageGallery": imageGallery.images[].asset->url
    },
    "bodyKorean": bodyKorean[]{
      ...,
      "asset": asset->url,
      "video": video->url,
      "imageGallery": imageGallery.images[].asset->url
    }
  }`);

  // Define the order of menuTypes
  const menuTypesOrder = ["Work", "Playground", "Bookshelf"];
  // Get list of all Types
  const postTypes = [...new Set(ogPosts.map((post) => post.menuType.value))];
  // Sort postTypes according to the defined order
  postTypes.sort(
    (a, b) => menuTypesOrder.indexOf(a) - menuTypesOrder.indexOf(b)
  );
  // Filter posts by type and flatten the array
  const posts = postTypes.flatMap((type) =>
    ogPosts.filter((post) => post.menuType.value === type)
  );

  return {
    props: {
      posts,
      postTypes,
    },
  };
}

export default function Home({ posts, postTypes }) {
  const [enSelected, setEnSelected] = useState(true);

  useEffect(() => {
    console.log("posts from useEffect", posts);

    Events.scrollEvent.register("begin", function () {
      console.log("begin", arguments);
    });

    Events.scrollEvent.register("end", function () {
      console.log("end", arguments);
    });

    scrollSpy.update();

    return () => {
      Events.scrollEvent.remove("begin");
      Events.scrollEvent.remove("end");
    };
  }, []);

  return (
    <>
      <Head>
        <title>Soy Kim</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex font-aeonik">
        <div className="z-50">
          <Menu posts={posts} enSelected={enSelected} />
        </div>

        <div className="flex-grow ml-[300px] phone:ml-0 w-full">
          <div id="soy" className="p-8 text-xl pt-24  text-black w-full">
            <div className="max-w-[550px] leading-snug">
              <div>Hi, I'm Soyeon.</div>
              <div>
                I'm a motion designer specializing in branding from Seoul, based
                in NYC. I'm currently a designer at Google Creative Lab.
              </div>
              <div className="mt-8">
                Read more about me{" "}
                <a className="underline" href="/about">
                  here
                </a>
                .
              </div>
            </div>
            <div className="bg-gray-100 mt-2 w-full h-96"></div>
          </div>
          {posts.map((post, index) => (
            <Section
              key={index}
              client={client}
              post={post}
              enSelected={enSelected}
            ></Section>
          ))}
          <div className="py-96 p-2 border-0 border-t-[0.5px] border-black">
            Thanks for making it to the end of the page! Leave a note for me...
          </div>
        </div>

        <div
          className="fixed flex p-4 bottom-0 left-0 z-50 space-x-1 text-xs
          "
        >
          <button
            className={`px-3 py-1 border-[0.5px] rounded-full border-black text-black ${
              enSelected ? "bg-black text-white" : ""
            }`}
            onClick={() => setEnSelected(true)}
          >
            EN
          </button>
          <button
            className={`px-3 py-1 border-[0.5px] rounded-full border-black text-black ${
              enSelected ? "" : "bg-black text-white"
            }`}
            onClick={() => setEnSelected(false)}
          >
            KR
          </button>
        </div>
      </main>
    </>
  );
}
